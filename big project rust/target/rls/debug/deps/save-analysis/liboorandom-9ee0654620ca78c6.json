{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0","program":"C:\\Users\\33769\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--edition=2018","--crate-name","oorandom","C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=9ee0654620ca78c6","-C","extra-filename=-9ee0654620ca78c6","--out-dir","d:\\ESGI\\Rust\\big project rust\\target\\rls\\debug\\deps","-L","dependency=d:\\ESGI\\Rust\\big project rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\33769\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"d:\\ESGI\\Rust\\big project rust\\target\\rls\\debug\\deps\\liboorandom-9ee0654620ca78c6.rmeta"},"prelude":{"crate_id":{"name":"oorandom","disambiguator":[808333355101948429,12522052556002618920]},"crate_root":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src","external_crates":[{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[9458200224090790355,13573932773036415113]}},{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17212932621614837670,6562776948220383497]}},{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[760535750034822653,11118367618612043106]}}],"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":0,"byte_end":19352,"line_start":1,"line_end":547,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":0,"byte_end":19352,"line_start":1,"line_end":547,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":42},{"krate":0,"index":52},{"krate":0,"index":50},{"krate":0,"index":48},{"krate":0,"index":45},{"krate":0,"index":14},{"krate":0,"index":53},{"krate":0,"index":63},{"krate":0,"index":61},{"krate":0,"index":59},{"krate":0,"index":56},{"krate":0,"index":28}],"decl_id":null,"docs":" A tiny, robust PRNG implementation.","sig":null,"attributes":[{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":750,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":774,"byte_end":798,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"forbid(missing_debug_implementations)","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":799,"byte_end":840,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"forbid(unused_results)","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":841,"byte_end":867,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"no_std","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":868,"byte_end":878,"line_start":22,"line_end":22,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":1044,"byte_end":1050,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Rand32","qualname":"::Rand32","value":"Rand32 {  }","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" A PRNG producing a 32-bit output.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":1332,"byte_end":1343,"line_start":39,"line_end":39,"column_start":15,"column_end":26},"name":"DEFAULT_INC","qualname":"::Rand32::DEFAULT_INC","value":"u64","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" The default value for `increment`.\n This is basically arbitrary, it comes from the\n PCG reference C implementation:\n https://github.com/imneme/pcg-c/blob/master/include/pcg_variants.h#L284\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":1729,"byte_end":1732,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Rand32>::new","value":"fn (seed: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG with the given seed and a default increment.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":2189,"byte_end":2196,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"new_inc","qualname":"<Rand32>::new_inc","value":"fn (seed: u64, increment: u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG.  The two inputs, `seed` and `increment`,\n determine what you get; `increment` basically selects which\n sequence of all those possible the PRNG will produce, and the\n `seed` selects where in that sequence you start.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":2768,"byte_end":2773,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"state","qualname":"<Rand32>::state","value":"fn (&self) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Returns the internal state of the PRNG.  This allows\n you to save a PRNG and create a new one that will resume\n from the same spot in the sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":3050,"byte_end":3060,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"from_state","qualname":"<Rand32>::from_state","value":"fn (state: (u64, u64)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG from a saved state from `Rand32::state()`.\n This is NOT quite the same as `new_inc()` because `new_inc()` does\n a little extra setup work to initialize the state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":3232,"byte_end":3240,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"rand_u32","qualname":"<Rand32>::rand_u32","value":"fn (&mut self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `u32` in the range `[0, u32::MAX]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":3660,"byte_end":3668,"line_start":99,"line_end":99,"column_start":12,"column_end":20},"name":"rand_i32","qualname":"<Rand32>::rand_i32","value":"fn (&mut self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `i32` in the range `[i32::MIN, i32::MAX]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":3797,"byte_end":3807,"line_start":104,"line_end":104,"column_start":12,"column_end":22},"name":"rand_float","qualname":"<Rand32>::rand_float","value":"fn (&mut self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `f32` in the range `[0.0, 1.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":4835,"byte_end":4845,"line_start":125,"line_end":125,"column_start":12,"column_end":22},"name":"rand_range","qualname":"<Rand32>::rand_range","value":"fn (&mut self, range: Range<u32>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Produces a random within the given bounds.  Like any `Range`,\n it includes the lower bound and excludes the upper one.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":6350,"byte_end":6356,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"Rand64","qualname":"::Rand64","value":"Rand64 {  }","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"decl_id":null,"docs":" A PRNG producing a 64-bit output.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":6583,"byte_end":6594,"line_start":170,"line_end":170,"column_start":15,"column_end":26},"name":"DEFAULT_INC","qualname":"::Rand64::DEFAULT_INC","value":"u128","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":" The default value for `increment`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":7019,"byte_end":7022,"line_start":179,"line_end":179,"column_start":12,"column_end":15},"name":"new","qualname":"<Rand64>::new","value":"fn (seed: u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG with the given seed and a default increment.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":7613,"byte_end":7618,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"state","qualname":"<Rand64>::state","value":"fn (&self) -> (u128, u128)","parent":null,"children":[],"decl_id":null,"docs":" Returns the internal state of the PRNG.  This allows\n you to save a PRNG and create a new one that will resume\n from the same spot in the sequence.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":7897,"byte_end":7907,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"from_state","qualname":"<Rand64>::from_state","value":"fn (state: (u128, u128)) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new PRNG from a saved state from `Rand32::state()`.\n This is NOT quite the same as `new_inc()` because `new_inc()` does\n a little extra setup work to initialize the state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":8080,"byte_end":8088,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"rand_u64","qualname":"<Rand64>::rand_u64","value":"fn (&mut self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `u64` in the range`[0, u64::MAX]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":8510,"byte_end":8518,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"rand_i64","qualname":"<Rand64>::rand_i64","value":"fn (&mut self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `i64` in the range `[i64::MIN, i64::MAX]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":8647,"byte_end":8657,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"rand_float","qualname":"<Rand64>::rand_float","value":"fn (&mut self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random `f64` in the range `[0.0, 1.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":9290,"byte_end":9300,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"rand_range","qualname":"<Rand64>::rand_range","value":"fn (&mut self, range: Range<u64>) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Produces a random within the given bounds.  Like any `Range`,\n it includes the lower bound and excludes the upper one.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":1091,"byte_end":1097,"line_start":34,"line_end":34,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":6399,"byte_end":6405,"line_start":166,"line_end":166,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":1091,"byte_end":1097,"line_start":34,"line_end":34,"column_start":6,"column_end":12},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\33769\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\oorandom-11.1.0\\src\\lib.rs","byte_start":6399,"byte_end":6405,"line_start":166,"line_end":166,"column_start":6,"column_end":12},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}}]}